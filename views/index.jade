extends layout

block content
  .metrics
    .backend_response_time
      h2.name Response Time
      h1.value
    .frontend_response_time
      h2.name Page Load Time
      h1.value
  .hits
    #tooltip
  .librato-metrics(data-instrument_id=14514669)

  script
    var hits = [];
    var svg = d3.select('.hits').append('svg:svg')
      .attr('width', '500px')
      .attr('height', '500px');
    var show_path_tooltip = function(d){
      $el = $(d3.select(this)[0][0]);
      position = $el.offset()
      text = d.path
      if (d.ip){ text = d.ip + ' ' + text };
      $('#tooltip')
        .html(text)
        .css('top', position.top - 25)
        .css('left', position.left + 25)
        .show();
    };
    var hide_path_tooltip = function(d){
      $('#tooltip').hide();
    };
    var draw = function(data){
      svg.selectAll('rect').data(data).enter().append('rect');
      var sqaures = svg.selectAll('rect').data(data)
        .attr('x', function(d, i){ return (i % 10) * 50 })
        .attr('y', function(d, i){ return Math.floor(i / 10) * 50 })
        .attr('width', 48)
        .attr('height', 48)
        .attr('class', function(d){
          return "status_" + d.code[0] + " status_" + d.code;
        })
        .on('mouseover', show_path_tooltip)
        .on('mouseout', hide_path_tooltip)
    };

    var socket = io.connect();
    socket.on('hits', function(data) {
      hits = data.reverse();
      hits = hits.slice(-100);
      draw(hits);
    });
    socket.on('hit', function(data) {
      hits.push(data);
      hits = hits.slice(-100);
      draw(hits);
    });
    socket.on('new_relic', function(data) {
      _.each(data, function(value, key){
        switch (key) {
          case 'be_response_time':
            $('.backend_response_time .value').html(value + ' ms');
            break;
          case 'fe_response_time':
            $('.frontend_response_time .value').html(value.toFixed(2) + ' s');
            break;
        }
      });
    });
